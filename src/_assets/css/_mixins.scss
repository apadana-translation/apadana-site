// =============================================================================
// Embed Font: A mixin for adding @font-face rules in Jekyll Assets SCSS
// Adapted from https://github.com/ttimsmith/ttimsmith.com/blob/7-move-over-to-jekyll-assets-for-compiling/_assets/stylesheets/_redbat/_mixins.scss (link no long available)
// Gets most compressed source first (see https://alistapart.com/article/using-webfonts)
// Usage: @include embed-font("Sample", "sample");
// =============================================================================

@mixin embed-font($font-name, $font-filename, $font-weight, $font-style) {
  @font-face {
    font-family: $font-name;
    src: url("../fonts/" + $font-filename + ".woff2") format("woff2");
    font-weight: $font-weight;
    font-style: $font-style;
    font-display: optional;
  }
}

// =====================================================
// Helper functions
// =====================================================

// generic map function
@function get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// color variable helper
// @author Thomas Bredin-Grey <tom@studiothick.com>
// Megatype: https://github.com/StudioThick/megatype
@function palette($color) {
  @return map-get($palettes, $color);
}

// =====================================================
// ------------- Megatype text link mixin --------------
// =====================================================
// @author Thomas Bredin-Grey <tom@studiothick.com>
// Megatype: https://github.com/StudioThick/megatype
// =====================================================

// better text decoration
@mixin text-link(
  $color: $link-color,
  $hover: $color,
  $offset: $link-offset,
  $opacity: $link-underline-opacity,
  $hover-opacity: $link-underline-hover-opacity
) {
  color: $color;
  text-decoration: none;
  background-image: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0) 50%,
    rgba($color, $opacity) 50%
  );
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 1.05em;
  background-position: 0 calc(43% + 0.44em + #{$offset});
  cursor: pointer;

  @if $hover != false {
    &:hover {
      background-image: linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0) 50%,
        rgba($hover, $hover-opacity) 50%
      );
      color: $hover;
    }
  }

  .no-cssgradients & {
    text-decoration: underline; // for browsers with no cssgradient support
  }
}

// remove text link style
@mixin reset-link($hard-reset: false) {
  @if $hard-reset == false {
    & {
      background-image: none;
    }

    &:hover {
      background-image: none;
    }

    .no-cssgradients & {
      text-decoration: none;
    }
  } @else {
    & {
      background-image: none !important;
    }

    &:hover {
      background-image: none !important;
    }

    .no-cssgradients & {
      text-decoration: none !important;
    }
  }
}

// =====================================================
// Font-Variant: safely and simply add OpenType font-variant
// CSS properties with @supports
// @author Dana Johnson <dana@sloopcreative.com>
// Usage: h1 { @include font-variant(property-1, property-2); }
// Don't forget to provide a fallback with `font-feature-settings`
// =====================================================

@mixin font-variant($property, $attribute) {
  @supports (font-variant-#{$property}: #{$attribute}) {
    & {
      font-feature-settings: normal;
      font-variant-#{$property}: #{$attribute};
    }
  }
}

@mixin breakpoint($min-width, $max-width: null) {
  @if ($max-width) {
    @media all and (min-width: $min-width) and (max-width: $max-width) {
      @content;
    }
  } @else {
    @media all and (min-width: $min-width) {
      @content;
    }
  }
}
